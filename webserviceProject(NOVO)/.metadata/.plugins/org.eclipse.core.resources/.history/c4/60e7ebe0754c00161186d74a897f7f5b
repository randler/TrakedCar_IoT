package br.edu.ifba.embarcados.webcoisas;

import java.sql.Connection;
import java.sql.SQLException;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import net.sf.json.JSON;
import br.edu.ifba.embarcados.webcoisas.bean.Carro;
import br.edu.ifba.embarcados.webcoisas.bean.Usuario;
import br.edu.ifba.embarcados.webcoisas.dao.CarroDAO;
import br.edu.ifba.embarcados.webcoisas.dao.UsuarioDAO;
import br.edu.ifba.embarcados.webcoisas.factory.ConnectionFactory;

import com.google.gson.Gson;

@Path("servico")
public class Servico {

	@GET
	@Path("/consultar/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public String pesquisarCarro(@PathParam("id") int id) {
		Connection con = ConnectionFactory.getConnection();
		CarroDAO carroDAO = CarroDAO.getInstancia();
		return new Gson().toJson(carroDAO.concultarCarro(con,id));
	}

	@GET
	@Path("/consultarRoubo/{email}")
	@Produces(MediaType.APPLICATION_JSON)
	public String pesquisarRouboCarro(@PathParam("email") String email) throws SQLException {
		Connection con = ConnectionFactory.getConnection();
		CarroDAO carroDAO = CarroDAO.getInstancia();
		UsuarioDAO usuarioDAO = UsuarioDAO.getInstancia();
		
		int usuarioId = carroDAO.concultarCarroRoubado(con,email);
		
		return new Gson().toJson(usuarioDAO.pesquisarUsuario(usuarioId, con));
	}
	
	@GET
    @Produces(MediaType.APPLICATION_JSON)
	@Path("/adicionar/"
			+ "{idUsuario}/"
			+ "{nomeUsuario}/"
			+ "{emailUsuario}/"
			+ "{idCarro}/"
			+ "{nomeCarro}/"
			+ "{marcaCarro}/"
			+ "{anoCarro}/"
			+ "{idUsuarioCarro}/")
	public boolean adicionarCarro(
			@PathParam("idUsuario") int idUsuario, 
			@PathParam("nomeUsuario") String nomeUsuario,
			@PathParam("emailUsuario") String emailUsuario,
			@PathParam("idCarro") int idCarro,
			@PathParam("nomeCarro") String nomeCarro,
			@PathParam("marcaCarro") String marcaCarro,
			@PathParam("anoCarro") String anoCarro,
			@PathParam("idUsuarioCarro") int Usuario_idUsuario)
			throws SQLException, InstantiationException,
			IllegalAccessException, ClassNotFoundException {

		boolean saida = false;
		
		Carro carro = new Carro(idCarro, nomeCarro, marcaCarro, anoCarro, Usuario_idUsuario);
		Usuario usuario = new Usuario(idUsuario, nomeUsuario, emailUsuario);

		Connection con = ConnectionFactory.getConnection();
		UsuarioDAO usuarioDAO = UsuarioDAO.getInstancia();
		CarroDAO carroDAO = CarroDAO.getInstancia();

		try {
			usuarioDAO.adicionarUsuario(usuario, con);
		} catch (SQLException e) {
			System.out.println("ERRO ao tentar inserir o usuario: "
					+ nomeUsuario);
			e.printStackTrace();
		}

		try {
			carroDAO.adicionarCarro(usuario.getId(), carro, con);
			saida  = true;
		} catch (SQLException e) {
			System.out.println("ERRO ao tentar inserir o Carro: " + nomeCarro);
			e.printStackTrace();
		}
		con.close();
		
		
		return saida;
	}
	
	
	@GET
    @Produces(MediaType.APPLICATION_JSON)
	@Path("/notificarRoubo/{idCarro}/")
	public boolean notificarCarroFurtado(@PathParam("idCarro") int idCarro)
			throws SQLException, InstantiationException,
			IllegalAccessException, ClassNotFoundException {

		boolean saida = false;
		Connection con = ConnectionFactory.getConnection();
		CarroDAO carroDAO = CarroDAO.getInstancia();

		try{
		carroDAO.alterarStatus(idCarro, true, con);
		saida = true;
		}catch(Exception e){
			
		}
		con.close();
		return saida;
	}
	
}
